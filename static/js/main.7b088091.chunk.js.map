{"version":3,"sources":["components/livingThings.js","components/gameOfLiveCanvas.js","App.js","index.js"],"names":["initializations","name","initialize","grid","len","iStart","jStart","length","Math","floor","midWay","i","RESOLUTION","renderCanvas","ctx","col","row","cell","beginPath","rect","fillStyle","fill","GameOfLife","props","useRef","console","log","canvasRef","windowUpdated","useEffect","canvas","current","getContext","setupGrid","width","window","innerWidth","height","innerHeight","numCols","round","numRows","Array","map","_","initializeGrid","windowUpdateFunction","addEventListener","prevTimestamp","requestAnimationFrame","update","timestamp","oldGrid","r","c","newGrid","ui","li","j","lj","rj","aliveNeightbours","createNextGeneration","removeEventListener","id","ref","style","position","left","bottom","zIndex","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b088091.chunk.js","sourcesContent":["export const famousLifeObjects = [\n    {\n        name: \"Glider\",\n        size: [6, 6],\n        initialize: function(grid, i, j , vOrient = 0, hOrient =0 ){\n            const obj = [\n                [0, 1, 0],\n                [0, 1, 1],\n                [1, 0, 1]\n            ]\n            if(vOrient===0) vOrient=Math.random()>0.5 ? 1:-1\n            if(hOrient === 0) hOrient=Math.random()>0.5 ? 1: -1\n\n            const rStart = vOrient === 1 ? i : i+this.size[0] -1\n            const cStart= hOrient === 1 ? j : j+this.size[1] -1\n            const numRows = grid.length\n            const numCols = grid[0].length\n            \n            obj.forEach((row, x) => row.forEach((val, y) => {\n                grid[(rStart + vOrient * x + numRows) % numRows]\n                [(cStart + hOrient * y + numCols) % numCols] = val\n            }\n            ))\n            return this.size\n        }\n    },\n    {\n        name: \"Glider Gun\",\n        size: [1000, 11],\n        initialize: [\n            [0, 0, 1, 1, 0, 0, 0, 0, 0],\n            [0, 0, 1, 1, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [1, 1, 0, 0, 0, 1, 1, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 1, 0, 0, 0, 1, 0, 0, 0],\n            [0, 0, 1, 1, 1, 0, 0, 0, 0],\n            [0, 0, 1, 1, 1, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 1, 0, 0, 0],\n            [0, 0, 0, 0, 1, 1, 1, 0, 0],\n            [0, 0, 0, 1, 0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 0, 1, 0, 0, 0],\n            [0, 0, 1, 0, 0, 0, 0, 0, 1],\n            [0, 0, 1, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 1, 0, 0, 0, 1, 0],\n            [0, 0, 0, 0, 1, 1, 1, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 1, 1, 0, 0, 0],\n            [0, 0, 0, 0, 1, 1, 0, 0, 0]\n        ]\n    },\n    {\n        name: \"Blinker\",\n        padding: [1, 1],\n        jump: [2, 2],\n        obj: [\n            [1, 1, 1],\n        ]\n    },\n    {\n\n    }\n]\n\nexport const initializations = [\n    {\n        name: \"theBigX\",\n        initialize : function(grid){\n            let len, iStart, jStart\n            if(grid.length> grid[0].length) { \n                len= grid[0].length\n                iStart=Math.floor((grid.length - len)/2)\n                jStart=0\n            }\n            else{\n                len= grid.length\n                jStart=Math.floor((grid[0].length - len)/2)\n                iStart=0\n            }\n            let midWay= Math.floor(len/2)\n            for(let i=0;i<midWay;i++){\n                grid[iStart+i][jStart+i]=grid[iStart+len-1-i][jStart+len-1-i]=grid[iStart+len-1-i][jStart+i]=grid[iStart+i][jStart+len-1-i]=1\n            }\n            grid[iStart+midWay][jStart+midWay]=1\n        }\n    },\n    {\n        name: \"marchingGliders\",\n        initialize: function(grid){\n            \n        }\n    },\n\n]\n// export default famousLifeObjects;","import { useState, useEffect, useRef } from \"react\";\nimport { initializations } from \"./livingThings\";\nimport * as Tone from 'tone';\n\nconst RESOLUTION = 15\n\nlet initializeGrid = (numRows, numCols) => {\n    console.log(\"initializing life\")\n    // const numCols = 50;\n    // const width = window.innerWidth;\n    // const boxSize = parseInt(width / (numCols - 1))\n    // const height = window.innerHeight;\n    // const numRows = parseInt(height / boxSize) + 1;\n    const grid = [...Array(numRows)].map(_ => Array(numCols).fill(0));\n    // let modulo = Math.floor(1 + Math.random()*(8))\n    initializations[0].initialize(grid)\n\n    return grid\n}\n\nlet createNextGeneration = (oldGrid) => {\n    \n    const r = oldGrid.length\n    const c = oldGrid[0].length\n    const newGrid = [...Array(r)].map(_ => Array(c).fill(0));\n    for (let i = 0; i < r; i++) {\n        let ui = (r + i - 1) % r\n        let li = (r + i + 1) % r\n        for (let j = 0; j < c; j++) {\n            let lj = (c + j - 1) % c;\n            let rj = (c + j + 1) % c;\n            let aliveNeightbours = oldGrid[i][lj] + oldGrid[ui][lj] + oldGrid[ui][j] + oldGrid[ui][rj] + oldGrid[i][rj] + oldGrid[li][rj]\n                + oldGrid[li][j] + oldGrid[li][lj]\n            if (oldGrid[i][j] === 1 && (aliveNeightbours === 3 || aliveNeightbours === 2))\n                newGrid[i][j] = 1\n            else if (oldGrid[i][j] === 0 && aliveNeightbours === 3)\n                newGrid[i][j] = 1\n        }\n    }\n    return newGrid;\n}\n\nlet renderCanvas = ((ctx, grid) => {\n    for (let col = 0; col < grid.length; col++) {\n      for (let row = 0; row < grid[col].length; row++) {\n        const cell = grid[col][row]\n\n        ctx.beginPath()\n        ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION)\n        ctx.fillStyle = cell ? 'black' : '#FFF'\n        ctx.fill()\n      }\n    }\n  })\n\n\nexport default function GameOfLife(props) {\n\n    // let [grid, setGrid] = useState(initializeGame)\n    let grid = useRef(null)\n    console.log(grid)\n    let ref = useRef(null)\n    let canvasRef = useRef(null)\n    let windowUpdated = useRef(true)\n    console.log(\"rerendering component\")\n    //Setting up Stuff\n    useEffect(() => {\n        // setup up window resize \n        // Tone.start()\n\n        console.log(\"starting  game setup\")\n        const canvas = canvasRef.current\n        const ctx = canvas.getContext('2d')\n        const setupGrid = () => {\n            \n            canvas.width = window.innerWidth\n            canvas.height = window.innerHeight\n            console.log(  canvas)\n            const numCols = Math.round(canvas.width / RESOLUTION)\n            const numRows = Math.round(canvas.height / RESOLUTION)\n            grid.current = initializeGrid(numCols, numRows)\n            renderCanvas(ctx, grid.current)\n        }\n        // const updateFunction = () => setGame(() => initializeGrid)\n        setupGrid()\n        const windowUpdateFunction= () => {\n            console.log(\"windowResized\")\n            windowUpdated.current=true\n        }\n        window.addEventListener(\"resize\", windowUpdateFunction)\n        let prevTimestamp=null\n        const update = (timestamp) => {\n            if (!prevTimestamp) {\n                prevTimestamp = timestamp\n            }\n            if (timestamp - prevTimestamp > 10) {\n                if(windowUpdated.current){\n                    windowUpdated.current=false\n                    setupGrid()\n                }\n                prevTimestamp = timestamp\n                grid.current = createNextGeneration(grid.current)\n                renderCanvas(ctx, grid.current)\n            }\n            window.requestAnimationFrame(update)\n        }\n        window.requestAnimationFrame(update)\n\n        console.log(\"game setup is done\")\n        return () => {\n            window.removeEventListener(\"resize\", windowUpdateFunction)\n            // clearInterval(interval)\n        }\n    }, [])\n\n    console.log(\"just before return\")\n    return (\n        <canvas\n            id='game-of-life'\n            ref={canvasRef}\n            style={{\n                position: 'absolute',\n                left: 0,\n                bottom: 0,\n                zIndex: -1\n            }}\n        />\n    )\n}","import React from 'react';\nimport GameOfLife from './components/gameOfLiveCanvas'\n\nfunction App() {\n  return (\n<GameOfLife/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}